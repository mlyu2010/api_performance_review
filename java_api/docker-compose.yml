version: '3.8'

services:
  postgres:
    image: postgres:18-alpine
    container_name: agents-postgres
    environment:
      POSTGRES_DB: agents_tasks_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # PostgreSQL Performance Tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.utf8"
      # Increase shared buffers for better performance
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAX_CONNECTIONS: 100
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - agents-network
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agents-api
    ports:
      - "8080:8080"
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod

      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/agents_tasks_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      DB_POOL_SIZE: 20
      DB_POOL_MIN_IDLE: 5

      # JWT Configuration
      JWT_SECRET: dGVzdC1zZWNyZXQta2V5LWZvci10ZXN0aW5nLXB1cnBvc2VzLW9ubHktbXVzdC1iZS1hdC1sZWFzdC0yNTYtYml0cy1sb25n
      JWT_EXPIRATION: 86400000

      # Rate Limiting
      RATELIMIT_CAPACITY: 100
      RATELIMIT_TOKENS: 100
      RATELIMIT_DURATION: 60

      # Server Configuration
      SERVER_PORT: 8080
      TOMCAT_MAX_THREADS: 200
      TOMCAT_MIN_THREADS: 10

      # Swagger (disable in production)
      SWAGGER_ENABLED: false
      API_DOCS_ENABLED: false
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - agents-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  agents-network:
    driver: bridge
